from random import randint

# Задача №1. Решение в группах
# Даны два массива чисел. Требуется вывести те элементы
# первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. Пользователь вводит
# число N - количество элементов в первом массиве, затем N
# чисел - элементы массива. Затем число M - количество
# элементов во втором массиве. Затем элементы второго массива
# Ввод: Вывод:
# 7 3 3 2 12
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1 (каждое число вводится с новой строки)

# n = int(input())
# m = int(input())

# lst1 = [randint(1, 10) for _ in range(n)]
# print(lst1)
# lst2 = [randint(1, 10) for _ in range(m)]
# print(lst2)

# print(*[item for item in lst1 if item not in lst2],sep=" ")

# Задача №2. Решение в группах
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# Ввод: Ввод:
# 5 5
# 1 2 1 4 2
# Вывод: Вывод:
# 0 2

# n = 10

# lst1 = [randint(1, 10) for _ in range(n)]
# print(sum(1 for i in range(1, len(lst1) - 1) if lst1[i - 1] < lst1[i] > lst1[i + 1]))


# 1. sum(...)

# Функция sum() используется для подсчета общего количества "пиковых" элементов в массиве. 
# Она принимает итерируемый объект (например, список) и возвращает сумму его элементов. 
# В нашем случае мы хотим подсчитать количество "пиков", и для этого мы создаем генераторное выражение внутри sum().

# ▎2. 1 for i in range(1, len(lst1) - 1)

# Эта часть выражения создает генератор, который будет возвращать 1 каждый раз, когда условие внутри if выполняется. 



# Задача №3. Решение в группах
# Дан список чисел. Посчитайте, сколько в нем пар
# элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных
# строках.
# Ввод:       Вывод:
# 1 2 3 2 3     2

lst1 = [1, 2, 3, 2, 3, 2]
lst1 = sorted(lst1)

print(sum(1 for i in range(len(lst1) - 1) if lst1[i] == lst1[i + 1]))

# Задача №4. Решение в группах
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105
# . Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
# Ввод: Вывод:
# 300 220 284
