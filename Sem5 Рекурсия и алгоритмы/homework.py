# Задание 1. Поиск элемента
# Пользователь вводит искомый ключ. Если он хочет, то может ввести
# максимальную глубину — уровень, до которого будет просматриваться
# структура.
# Напишите функцию, которая находит заданный пользователем ключ в словаре
# и выдаёт значение этого ключа на экран. По умолчанию уровень не задан. В
# качестве примера можно использовать такой словарь:
# site = {
# 'html': {
# 'head': {
# 'title': 'Мой сайт'
# },
# 'body': {
# 'h2': 'Здесь будет мой заголовок',
# 'div': 'Тут, наверное, какой-то блок',
# 'p': 'А вот здесь новый абзац'
# }
# }
# }
# Пример 1
# Введите искомый ключ: head
# Хотите ввести максимальную глубину? Y/N: n
# Значение ключа: {'title': 'Мой сайт'}
# Пример 2
# Введите искомый ключ: head
# Хотите ввести максимальную глубину? Y/N: y
# Введите максимальную глубину: 1
# Значение ключа: None




# Задача 2. Глубокое копирование
# Вы сделали для заказчика структуру сайта по продаже телефонов:
# site = {
# 'html': {
# 'head': {
# 'title': 'Куплю/продам телефон недорого'
# },
# 'body': {
# 'h2': 'У нас самая низкая цена на iPhone',
# 'div': 'Купить',
# 'p': ‘Продать'
# }
# }
# }
# Заказчик рассказал своим коллегам на рынке, и они захотели такой же сайт для
# своих товаров. Вы посчитали, что это лёгкая задача, и быстро принялись за
# работу.
# Напишите программу, которая запрашивает у клиента количество сайтов, затем
# названия продуктов, а после каждого запроса выводит на экран активные
# сайты.
# Условия:
# ● учтите, что функция должна уметь работать с разными сайтами (иначе
# вам придётся переделывать программу под каждого заказчика заново);
# ● вы должны получить список, хранящий сайты для разных продуктов (а
# значит, для каждого продукта нужно будет первым делом выполнить
# глубокое копирование сайта).
# Пример вывода
# Сколько сайтов: 2
# Введите название продукта для нового сайта: iPhone
# Сайт для iPhone:
# site = {
# 'html': {
# 'head': {
# 'title': 'Куплю/продам iPhone недорого'
# },
# 'body': {
# 'h2': 'У нас самая низкая цена на iPhone',
# 'div': 'Купить',
# 'p': ‘Продать'
# }
# }
# }
# Введите название продукта для нового сайта: Samsung
# Сайт для iPhone:
# site = {
# 'html': {
# 'head': {
# 'title': 'Куплю/продам iPhone недорого'
# },
# 'body': {
# 'h2': 'У нас самая низкая цена на iPhone',
# 'div': 'Купить',
# 'p': ‘Продать'
# }
# }
# }
# Сайт для Samsung:
# site = {
# 'html': {
# 'head': {
# 'title': 'Куплю/продам Samsung недорого'
# },
# 'body': {
# 'h2': 'У нас самая низкая цена на Samsung',
# 'div': 'Купить',
# 'p': ‘Продать'
# }
# }
# }
# Обратите внимание, что на первой итерации выводится только один сайт (для
# iPhone), а на второй итерации — оба сайта (и для iPhone и для Samsung).
# Чтобы это реализовать, нужно сохранять сайты в списке и каждый раз печатать
# все его элементы.







# Задача 3. Продвинутая функция sum
# Как вы знаете, в Python есть полезная функция sum, которая умеет находить
# сумму элементов списков. Иногда базовых возможностей функций не хватает
# для работы и приходится их усовершенствовать.
# Напишите свою функцию sum, которая должна быть более гибкой, чем
# стандартная. Она должна уметь складывать числа:
# ● из списка списков,
# ● набора параметров.
# Основной код оставьте пустым или закомментированным (используйте его
# только для тестирования).
# Примеры вызовов функции
# sum([[1, 2, [3]], [1], 3])
# Ответ в консоли: 10
# sum(1, 2, 3, 4, 5)
# Ответ в консоли: 15